2022-07-01 03:20:45:698 grammar LogManager.java:25 before: (COMBINED_GRAMMAR proyectoq (RULES (RULE prog (BLOCK (ALT registro_q EOL))) (RULE expr (BLOCK (ALT seleccion) (ALT operar) (ALT tensor) (ALT union) (ALT inversa) (ALT medir))) (RULE registro_q (BLOCK (ALT INI id) (ALT INI id array_q) (ALT INI id OP_Y expr) (ALT INI id array_q OP_Y expr) (ALT INI))) (RULE seleccion (BLOCK (ALT SELE PRA id PRC OP_IGUAL id PCA INDEX OP_DOSP INDEX PCC) (ALT SELE PRA id PRC OP_IGUAL id PCA INDEX OP_DOSP INDEX PCC expr))) (RULE operar (BLOCK (ALT OP (BLOCK (ALT PUERTA_Q)) (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT PRC))) (ALT OP (BLOCK (ALT PUERTA_Q)) (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT PRC)) (BLOCK (ALT expr))))) (RULE tensor (BLOCK (ALT TEN (BLOCK (ALT id)) ENTRE (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT COMA)) (BLOCK (ALT id)) (BLOCK (ALT PRC))) (ALT TEN (BLOCK (ALT id)) ENTRE (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT COMA)) (BLOCK (ALT id)) (BLOCK (ALT PRC)) (BLOCK (ALT expr))))) (RULE union (BLOCK (ALT UN (BLOCK (ALT id)) ENTRE (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT COMA)) (BLOCK (ALT id)) (BLOCK (ALT PRC))) (ALT UN (BLOCK (ALT id)) ENTRE (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT COMA)) (BLOCK (ALT id)) (BLOCK (ALT PRC)) (BLOCK (ALT expr))))) (RULE inversa (BLOCK (ALT INV (BLOCK (ALT id)) (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT PRC))) (ALT INV (BLOCK (ALT id)) (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT PRC)) (BLOCK (ALT expr))))) (RULE medir (BLOCK (ALT MED (BLOCK (ALT id)) EN (BLOCK (ALT id))) (ALT MED (BLOCK (ALT id)) EN (BLOCK (ALT id)) (BLOCK (ALT expr))))) (RULE PUERTA_Q (BLOCK (ALT 'x') (ALT 'not') (ALT 'y') (ALT 'z') (ALT 'h') (ALT 'hadamard') (ALT 'cnot') (ALT 'fase') (ALT 'swap'))) (RULE INI (BLOCK (ALT 'inicio') (ALT 'INICIO'))) (RULE SELE (BLOCK (ALT 'seleccion') (ALT 'SELECCION'))) (RULE EN (BLOCK (ALT 'en') (ALT 'EN'))) (RULE OP (BLOCK (ALT 'operar') (ALT 'OPERAR'))) (RULE TEN (BLOCK (ALT 'tensor') (ALT 'TENSOR'))) (RULE ENTRE (BLOCK (ALT 'entre') (ALT 'ENTRE'))) (RULE UN (BLOCK (ALT 'union') (ALT 'UNION'))) (RULE INV (BLOCK (ALT 'inv') (ALT 'INV'))) (RULE MED (BLOCK (ALT 'medir') (ALT 'MEDIR'))) (RULE id (BLOCK (ALT (+ (BLOCK (ALT LETRA))) (* (BLOCK (ALT DIGITO)))))) (RULE array_q (BLOCK (ALT PCA QUBIT PCC) (ALT PCA QUBIT COMA mas_q PCC))) (RULE mas_q (BLOCK (ALT QUBIT) (ALT QUBIT COMA mas_q))) (RULE QUBIT (BLOCK (ALT '0') (ALT '1'))) (RULE INDEX (BLOCK (ALT '0') (ALT '1') (ALT '2') (ALT '3') (ALT '4') (ALT '5') (ALT '6') (ALT '7'))) (RULE NEWLINE (BLOCK (LEXER_ALT_ACTION (ALT (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT ' ') (ALT '\t')))) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE DIGITO (BLOCK (ALT '0') (ALT '1') (ALT '2') (ALT '3') (ALT '4') (ALT '5') (ALT '6') (ALT '7') (ALT '8') (ALT '9'))) (RULE N_INTEGER (BLOCK (ALT (? (BLOCK (ALT '-'))) (BLOCK (ALT (+ (BLOCK (ALT DIGITO)))))))) (RULE N_FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (BLOCK (ALT (BLOCK (ALT (* (BLOCK (ALT DIGITO))))) PUNTO (BLOCK (ALT (+ (BLOCK (ALT DIGITO)))))))))) (RULE LETRA (BLOCK (ALT 'A') (ALT 'B') (ALT 'C') (ALT 'D') (ALT 'E') (ALT 'F') (ALT 'G') (ALT 'H') (ALT 'I') (ALT 'J') (ALT 'K') (ALT 'L') (ALT 'M') (ALT 'N') (ALT 'O') (ALT 'P') (ALT 'Q') (ALT 'R') (ALT 'S') (ALT 'T') (ALT 'U') (ALT 'V') (ALT 'W') (ALT 'X') (ALT 'Y') (ALT 'Z') (ALT 'a') (ALT 'b') (ALT 'c') (ALT 'd') (ALT 'e') (ALT 'f') (ALT 'g') (ALT 'h') (ALT 'i') (ALT 'j') (ALT 'k') (ALT 'l') (ALT 'm') (ALT 'n') (ALT 'o') (ALT 'p') (ALT 'q') (ALT 'r') (ALT 's') (ALT 't') (ALT 'u') (ALT 'v') (ALT 'w') (ALT 'x') (ALT 'y') (ALT 'z'))) (RULE ESPACIO (BLOCK (ALT ' '))) (RULE COMENTARIO_INI (BLOCK (ALT '/*'))) (RULE COMENTARIO_FIN (BLOCK (ALT '*/'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE OP_SUM (BLOCK (ALT '+'))) (RULE OP_REST (BLOCK (ALT '-'))) (RULE OP_POR (BLOCK (ALT '*'))) (RULE OP_DIV (BLOCK (ALT '/'))) (RULE OP_IGUAL (BLOCK (ALT '='))) (RULE OP_MAYOR (BLOCK (ALT '>'))) (RULE OP_MENOR (BLOCK (ALT '<'))) (RULE OP_MAYOR_IGUAL (BLOCK (ALT '>='))) (RULE OP_MENOR_IGUAL (BLOCK (ALT '<='))) (RULE OP_EQUI (BLOCK (ALT '=='))) (RULE OP_NEG (BLOCK (ALT '!'))) (RULE OP_DOSP (BLOCK (ALT ':'))) (RULE OP_DIF (BLOCK (ALT '!='))) (RULE OP_Y (BLOCK (ALT '&'))) (RULE OP_LOGICA (BLOCK (ALT OP_MAYOR) (ALT OP_MENOR) (ALT OP_MAYOR_IGUAL) (ALT OP_MENOR_IGUAL) (ALT OP_EQUI) (ALT OP_NEG) (ALT OP_DIF))) (RULE OP_ARITMETICA (BLOCK (ALT OP_SUM) (ALT OP_REST) (ALT OP_POR) (ALT OP_DIV))) (RULE LLA (BLOCK (ALT '{'))) (RULE LLC (BLOCK (ALT '}'))) (RULE PRA (BLOCK (ALT '('))) (RULE PRC (BLOCK (ALT ')'))) (RULE PCA (BLOCK (ALT '['))) (RULE PCC (BLOCK (ALT ']'))) (RULE EOL (BLOCK (ALT ';'))) (RULE array (BLOCK (ALT (BLOCK (ALT PRA)) (BLOCK (ALT (? (BLOCK (ALT (BLOCK (ALT N_INTEGER) (ALT N_FLOAT) (ALT id) (ALT variable)) (BLOCK (ALT COMA))))))) (BLOCK (ALT N_INTEGER) (ALT N_FLOAT) (ALT id) (ALT variable)) (BLOCK (ALT PRC))))) (RULE matriz (BLOCK (ALT (BLOCK (ALT PCA)) (BLOCK (ALT (? (BLOCK (ALT (BLOCK (ALT array)) (BLOCK (ALT COMA))))))) (BLOCK (ALT array)) (BLOCK (ALT PCC))))) (RULE IF (BLOCK (ALT 'if') (ALT 'IF'))) (RULE WHILE (BLOCK (ALT 'while') (ALT 'WHILE'))) (RULE VAR (BLOCK (ALT 'VAR'))) (RULE FINVAR (BLOCK (ALT 'FINVAR'))) (RULE INT (BLOCK (ALT 'INT') (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float') (ALT 'FLOAT'))) (RULE ELSE (BLOCK (ALT 'else') (ALT 'ELSE'))) (RULE variable (BLOCK (ALT (BLOCK (ALT OP_DOSP)) (BLOCK (ALT id))))) (RULE variable_declar (BLOCK (ALT (BLOCK (ALT VAR)) (BLOCK (ALT variable)) (BLOCK (ALT OP_IGUAL)) (BLOCK (ALT array) (ALT matriz) (ALT id) (ALT N_FLOAT) (ALT variable) (ALT (BLOCK (ALT (BLOCK (ALT N_FLOAT) (ALT N_INTEGER)) (BLOCK (ALT OP_ARITMETICA)) (BLOCK (ALT N_FLOAT) (ALT N_INTEGER)))))) (BLOCK (ALT EOL)) (BLOCK (ALT FINVAR))))) (RULE condicion (BLOCK (ALT (BLOCK (ALT variable)) (BLOCK (ALT OP_LOGICA)) (BLOCK (ALT variable))))) (RULE sentencia (BLOCK (ALT (+ (BLOCK (ALT variable_declar) (ALT if_sentencia) (ALT while_sentencia)))))) (RULE if_sentencia (BLOCK (ALT (BLOCK (ALT IF)) (BLOCK (ALT PRA)) (BLOCK (ALT condicion)) (BLOCK (ALT PRC)) (BLOCK (ALT LLA)) (BLOCK (ALT sentencia)) (BLOCK (ALT LLC)) (? (BLOCK (ALT else_sentencia)))))) (RULE else_sentencia (BLOCK (ALT (BLOCK (ALT ELSE)) (BLOCK (ALT LLA)) (BLOCK (ALT sentencia)) (BLOCK (ALT LLC))))) (RULE while_sentencia (BLOCK (ALT (BLOCK (ALT WHILE)) (BLOCK (ALT PRA)) (BLOCK (ALT condicion)) (BLOCK (ALT PRC)) (BLOCK (ALT LLA)) (BLOCK (ALT sentencia)) (BLOCK (ALT LLC)))))))
2022-07-01 03:20:45:734 grammar LogManager.java:25 after: (COMBINED_GRAMMAR proyectoq (RULES (RULE prog (BLOCK (ALT registro_q EOL))) (RULE expr (BLOCK (ALT seleccion) (ALT operar) (ALT tensor) (ALT union) (ALT inversa) (ALT medir))) (RULE registro_q (BLOCK (ALT INI id) (ALT INI id array_q) (ALT INI id OP_Y expr) (ALT INI id array_q OP_Y expr) (ALT INI))) (RULE seleccion (BLOCK (ALT SELE PRA id PRC OP_IGUAL id PCA INDEX OP_DOSP INDEX PCC) (ALT SELE PRA id PRC OP_IGUAL id PCA INDEX OP_DOSP INDEX PCC expr))) (RULE operar (BLOCK (ALT OP (BLOCK (ALT PUERTA_Q)) (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT PRC))) (ALT OP (BLOCK (ALT PUERTA_Q)) (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT PRC)) (BLOCK (ALT expr))))) (RULE tensor (BLOCK (ALT TEN (BLOCK (ALT id)) ENTRE (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT COMA)) (BLOCK (ALT id)) (BLOCK (ALT PRC))) (ALT TEN (BLOCK (ALT id)) ENTRE (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT COMA)) (BLOCK (ALT id)) (BLOCK (ALT PRC)) (BLOCK (ALT expr))))) (RULE union (BLOCK (ALT UN (BLOCK (ALT id)) ENTRE (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT COMA)) (BLOCK (ALT id)) (BLOCK (ALT PRC))) (ALT UN (BLOCK (ALT id)) ENTRE (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT COMA)) (BLOCK (ALT id)) (BLOCK (ALT PRC)) (BLOCK (ALT expr))))) (RULE inversa (BLOCK (ALT INV (BLOCK (ALT id)) (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT PRC))) (ALT INV (BLOCK (ALT id)) (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT PRC)) (BLOCK (ALT expr))))) (RULE medir (BLOCK (ALT MED (BLOCK (ALT id)) EN (BLOCK (ALT id))) (ALT MED (BLOCK (ALT id)) EN (BLOCK (ALT id)) (BLOCK (ALT expr))))) (RULE PUERTA_Q (BLOCK (ALT 'x') (ALT 'not') (ALT 'y') (ALT 'z') (ALT 'h') (ALT 'hadamard') (ALT 'cnot') (ALT 'fase') (ALT 'swap'))) (RULE INI (BLOCK (ALT 'inicio') (ALT 'INICIO'))) (RULE SELE (BLOCK (ALT 'seleccion') (ALT 'SELECCION'))) (RULE EN (BLOCK (ALT 'en') (ALT 'EN'))) (RULE OP (BLOCK (ALT 'operar') (ALT 'OPERAR'))) (RULE TEN (BLOCK (ALT 'tensor') (ALT 'TENSOR'))) (RULE ENTRE (BLOCK (ALT 'entre') (ALT 'ENTRE'))) (RULE UN (BLOCK (ALT 'union') (ALT 'UNION'))) (RULE INV (BLOCK (ALT 'inv') (ALT 'INV'))) (RULE MED (BLOCK (ALT 'medir') (ALT 'MEDIR'))) (RULE id (BLOCK (ALT (+ (BLOCK (ALT LETRA))) (* (BLOCK (ALT DIGITO)))))) (RULE array_q (BLOCK (ALT PCA QUBIT PCC) (ALT PCA QUBIT COMA mas_q PCC))) (RULE mas_q (BLOCK (ALT QUBIT) (ALT QUBIT COMA mas_q))) (RULE QUBIT (BLOCK (ALT (SET '0' '1')))) (RULE INDEX (BLOCK (ALT (SET '0' '1' '2' '3' '4' '5' '6' '7')))) (RULE NEWLINE (BLOCK (LEXER_ALT_ACTION (ALT (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT (SET ' ' '\t'))))) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE DIGITO (BLOCK (ALT (SET '0' '1' '2' '3' '4' '5' '6' '7' '8' '9')))) (RULE N_INTEGER (BLOCK (ALT (? (BLOCK (ALT '-'))) (BLOCK (ALT (+ (BLOCK (ALT DIGITO)))))))) (RULE N_FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (BLOCK (ALT (BLOCK (ALT (* (BLOCK (ALT DIGITO))))) PUNTO (BLOCK (ALT (+ (BLOCK (ALT DIGITO)))))))))) (RULE LETRA (BLOCK (ALT (SET 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z')))) (RULE ESPACIO (BLOCK (ALT ' '))) (RULE COMENTARIO_INI (BLOCK (ALT '/*'))) (RULE COMENTARIO_FIN (BLOCK (ALT '*/'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE OP_SUM (BLOCK (ALT '+'))) (RULE OP_REST (BLOCK (ALT '-'))) (RULE OP_POR (BLOCK (ALT '*'))) (RULE OP_DIV (BLOCK (ALT '/'))) (RULE OP_IGUAL (BLOCK (ALT '='))) (RULE OP_MAYOR (BLOCK (ALT '>'))) (RULE OP_MENOR (BLOCK (ALT '<'))) (RULE OP_MAYOR_IGUAL (BLOCK (ALT '>='))) (RULE OP_MENOR_IGUAL (BLOCK (ALT '<='))) (RULE OP_EQUI (BLOCK (ALT '=='))) (RULE OP_NEG (BLOCK (ALT '!'))) (RULE OP_DOSP (BLOCK (ALT ':'))) (RULE OP_DIF (BLOCK (ALT '!='))) (RULE OP_Y (BLOCK (ALT '&'))) (RULE OP_LOGICA (BLOCK (ALT OP_MAYOR) (ALT OP_MENOR) (ALT OP_MAYOR_IGUAL) (ALT OP_MENOR_IGUAL) (ALT OP_EQUI) (ALT OP_NEG) (ALT OP_DIF))) (RULE OP_ARITMETICA (BLOCK (ALT OP_SUM) (ALT OP_REST) (ALT OP_POR) (ALT OP_DIV))) (RULE LLA (BLOCK (ALT '{'))) (RULE LLC (BLOCK (ALT '}'))) (RULE PRA (BLOCK (ALT '('))) (RULE PRC (BLOCK (ALT ')'))) (RULE PCA (BLOCK (ALT '['))) (RULE PCC (BLOCK (ALT ']'))) (RULE EOL (BLOCK (ALT ';'))) (RULE array (BLOCK (ALT (BLOCK (ALT PRA)) (BLOCK (ALT (? (BLOCK (ALT (BLOCK (ALT N_INTEGER) (ALT N_FLOAT) (ALT id) (ALT variable)) (BLOCK (ALT COMA))))))) (BLOCK (ALT N_INTEGER) (ALT N_FLOAT) (ALT id) (ALT variable)) (BLOCK (ALT PRC))))) (RULE matriz (BLOCK (ALT (BLOCK (ALT PCA)) (BLOCK (ALT (? (BLOCK (ALT (BLOCK (ALT array)) (BLOCK (ALT COMA))))))) (BLOCK (ALT array)) (BLOCK (ALT PCC))))) (RULE IF (BLOCK (ALT 'if') (ALT 'IF'))) (RULE WHILE (BLOCK (ALT 'while') (ALT 'WHILE'))) (RULE VAR (BLOCK (ALT 'VAR'))) (RULE FINVAR (BLOCK (ALT 'FINVAR'))) (RULE INT (BLOCK (ALT 'INT') (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float') (ALT 'FLOAT'))) (RULE ELSE (BLOCK (ALT 'else') (ALT 'ELSE'))) (RULE variable (BLOCK (ALT (BLOCK (ALT OP_DOSP)) (BLOCK (ALT id))))) (RULE variable_declar (BLOCK (ALT (BLOCK (ALT VAR)) (BLOCK (ALT variable)) (BLOCK (ALT OP_IGUAL)) (BLOCK (ALT array) (ALT matriz) (ALT id) (ALT N_FLOAT) (ALT variable) (ALT (BLOCK (ALT (SET N_FLOAT N_INTEGER) (BLOCK (ALT OP_ARITMETICA)) (SET N_FLOAT N_INTEGER))))) (BLOCK (ALT EOL)) (BLOCK (ALT FINVAR))))) (RULE condicion (BLOCK (ALT (BLOCK (ALT variable)) (BLOCK (ALT OP_LOGICA)) (BLOCK (ALT variable))))) (RULE sentencia (BLOCK (ALT (+ (BLOCK (ALT variable_declar) (ALT if_sentencia) (ALT while_sentencia)))))) (RULE if_sentencia (BLOCK (ALT (BLOCK (ALT IF)) (BLOCK (ALT PRA)) (BLOCK (ALT condicion)) (BLOCK (ALT PRC)) (BLOCK (ALT LLA)) (BLOCK (ALT sentencia)) (BLOCK (ALT LLC)) (? (BLOCK (ALT else_sentencia)))))) (RULE else_sentencia (BLOCK (ALT (BLOCK (ALT ELSE)) (BLOCK (ALT LLA)) (BLOCK (ALT sentencia)) (BLOCK (ALT LLC))))) (RULE while_sentencia (BLOCK (ALT (BLOCK (ALT WHILE)) (BLOCK (ALT PRA)) (BLOCK (ALT condicion)) (BLOCK (ALT PRC)) (BLOCK (ALT LLA)) (BLOCK (ALT sentencia)) (BLOCK (ALT LLC)))))))
2022-07-01 03:20:45:773 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR proyectoq (RULES (RULE prog (BLOCK (ALT registro_q EOL))) (RULE expr (BLOCK (ALT seleccion) (ALT operar) (ALT tensor) (ALT union) (ALT inversa) (ALT medir))) (RULE registro_q (BLOCK (ALT INI id) (ALT INI id array_q) (ALT INI id OP_Y expr) (ALT INI id array_q OP_Y expr) (ALT INI))) (RULE seleccion (BLOCK (ALT SELE PRA id PRC OP_IGUAL id PCA INDEX OP_DOSP INDEX PCC) (ALT SELE PRA id PRC OP_IGUAL id PCA INDEX OP_DOSP INDEX PCC expr))) (RULE operar (BLOCK (ALT OP (BLOCK (ALT PUERTA_Q)) (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT PRC))) (ALT OP (BLOCK (ALT PUERTA_Q)) (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT PRC)) (BLOCK (ALT expr))))) (RULE tensor (BLOCK (ALT TEN (BLOCK (ALT id)) ENTRE (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT COMA)) (BLOCK (ALT id)) (BLOCK (ALT PRC))) (ALT TEN (BLOCK (ALT id)) ENTRE (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT COMA)) (BLOCK (ALT id)) (BLOCK (ALT PRC)) (BLOCK (ALT expr))))) (RULE union (BLOCK (ALT UN (BLOCK (ALT id)) ENTRE (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT COMA)) (BLOCK (ALT id)) (BLOCK (ALT PRC))) (ALT UN (BLOCK (ALT id)) ENTRE (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT COMA)) (BLOCK (ALT id)) (BLOCK (ALT PRC)) (BLOCK (ALT expr))))) (RULE inversa (BLOCK (ALT INV (BLOCK (ALT id)) (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT PRC))) (ALT INV (BLOCK (ALT id)) (BLOCK (ALT PRA)) (BLOCK (ALT id)) (BLOCK (ALT PRC)) (BLOCK (ALT expr))))) (RULE medir (BLOCK (ALT MED (BLOCK (ALT id)) EN (BLOCK (ALT id))) (ALT MED (BLOCK (ALT id)) EN (BLOCK (ALT id)) (BLOCK (ALT expr))))) (RULE id (BLOCK (ALT (+ (BLOCK (ALT LETRA))) (* (BLOCK (ALT DIGITO)))))) (RULE array_q (BLOCK (ALT PCA QUBIT PCC) (ALT PCA QUBIT COMA mas_q PCC))) (RULE mas_q (BLOCK (ALT QUBIT) (ALT QUBIT COMA mas_q))) (RULE array (BLOCK (ALT (BLOCK (ALT PRA)) (BLOCK (ALT (? (BLOCK (ALT (BLOCK (ALT N_INTEGER) (ALT N_FLOAT) (ALT id) (ALT variable)) (BLOCK (ALT COMA))))))) (BLOCK (ALT N_INTEGER) (ALT N_FLOAT) (ALT id) (ALT variable)) (BLOCK (ALT PRC))))) (RULE matriz (BLOCK (ALT (BLOCK (ALT PCA)) (BLOCK (ALT (? (BLOCK (ALT (BLOCK (ALT array)) (BLOCK (ALT COMA))))))) (BLOCK (ALT array)) (BLOCK (ALT PCC))))) (RULE variable (BLOCK (ALT (BLOCK (ALT OP_DOSP)) (BLOCK (ALT id))))) (RULE variable_declar (BLOCK (ALT (BLOCK (ALT VAR)) (BLOCK (ALT variable)) (BLOCK (ALT OP_IGUAL)) (BLOCK (ALT array) (ALT matriz) (ALT id) (ALT N_FLOAT) (ALT variable) (ALT (BLOCK (ALT (SET N_FLOAT N_INTEGER) (BLOCK (ALT OP_ARITMETICA)) (SET N_FLOAT N_INTEGER))))) (BLOCK (ALT EOL)) (BLOCK (ALT FINVAR))))) (RULE condicion (BLOCK (ALT (BLOCK (ALT variable)) (BLOCK (ALT OP_LOGICA)) (BLOCK (ALT variable))))) (RULE sentencia (BLOCK (ALT (+ (BLOCK (ALT variable_declar) (ALT if_sentencia) (ALT while_sentencia)))))) (RULE if_sentencia (BLOCK (ALT (BLOCK (ALT IF)) (BLOCK (ALT PRA)) (BLOCK (ALT condicion)) (BLOCK (ALT PRC)) (BLOCK (ALT LLA)) (BLOCK (ALT sentencia)) (BLOCK (ALT LLC)) (? (BLOCK (ALT else_sentencia)))))) (RULE else_sentencia (BLOCK (ALT (BLOCK (ALT ELSE)) (BLOCK (ALT LLA)) (BLOCK (ALT sentencia)) (BLOCK (ALT LLC))))) (RULE while_sentencia (BLOCK (ALT (BLOCK (ALT WHILE)) (BLOCK (ALT PRA)) (BLOCK (ALT condicion)) (BLOCK (ALT PRC)) (BLOCK (ALT LLA)) (BLOCK (ALT sentencia)) (BLOCK (ALT LLC)))))))
2022-07-01 03:20:45:774 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR proyectoqLexer (RULES (RULE PUERTA_Q (BLOCK (ALT 'x') (ALT 'not') (ALT 'y') (ALT 'z') (ALT 'h') (ALT 'hadamard') (ALT 'cnot') (ALT 'fase') (ALT 'swap'))) (RULE INI (BLOCK (ALT 'inicio') (ALT 'INICIO'))) (RULE SELE (BLOCK (ALT 'seleccion') (ALT 'SELECCION'))) (RULE EN (BLOCK (ALT 'en') (ALT 'EN'))) (RULE OP (BLOCK (ALT 'operar') (ALT 'OPERAR'))) (RULE TEN (BLOCK (ALT 'tensor') (ALT 'TENSOR'))) (RULE ENTRE (BLOCK (ALT 'entre') (ALT 'ENTRE'))) (RULE UN (BLOCK (ALT 'union') (ALT 'UNION'))) (RULE INV (BLOCK (ALT 'inv') (ALT 'INV'))) (RULE MED (BLOCK (ALT 'medir') (ALT 'MEDIR'))) (RULE QUBIT (BLOCK (ALT (SET '0' '1')))) (RULE INDEX (BLOCK (ALT (SET '0' '1' '2' '3' '4' '5' '6' '7')))) (RULE NEWLINE (BLOCK (LEXER_ALT_ACTION (ALT (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT (SET ' ' '\t'))))) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE DIGITO (BLOCK (ALT (SET '0' '1' '2' '3' '4' '5' '6' '7' '8' '9')))) (RULE N_INTEGER (BLOCK (ALT (? (BLOCK (ALT '-'))) (BLOCK (ALT (+ (BLOCK (ALT DIGITO)))))))) (RULE N_FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (BLOCK (ALT (BLOCK (ALT (* (BLOCK (ALT DIGITO))))) PUNTO (BLOCK (ALT (+ (BLOCK (ALT DIGITO)))))))))) (RULE LETRA (BLOCK (ALT (SET 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z')))) (RULE ESPACIO (BLOCK (ALT ' '))) (RULE COMENTARIO_INI (BLOCK (ALT '/*'))) (RULE COMENTARIO_FIN (BLOCK (ALT '*/'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE OP_SUM (BLOCK (ALT '+'))) (RULE OP_REST (BLOCK (ALT '-'))) (RULE OP_POR (BLOCK (ALT '*'))) (RULE OP_DIV (BLOCK (ALT '/'))) (RULE OP_IGUAL (BLOCK (ALT '='))) (RULE OP_MAYOR (BLOCK (ALT '>'))) (RULE OP_MENOR (BLOCK (ALT '<'))) (RULE OP_MAYOR_IGUAL (BLOCK (ALT '>='))) (RULE OP_MENOR_IGUAL (BLOCK (ALT '<='))) (RULE OP_EQUI (BLOCK (ALT '=='))) (RULE OP_NEG (BLOCK (ALT '!'))) (RULE OP_DOSP (BLOCK (ALT ':'))) (RULE OP_DIF (BLOCK (ALT '!='))) (RULE OP_Y (BLOCK (ALT '&'))) (RULE OP_LOGICA (BLOCK (ALT OP_MAYOR) (ALT OP_MENOR) (ALT OP_MAYOR_IGUAL) (ALT OP_MENOR_IGUAL) (ALT OP_EQUI) (ALT OP_NEG) (ALT OP_DIF))) (RULE OP_ARITMETICA (BLOCK (ALT OP_SUM) (ALT OP_REST) (ALT OP_POR) (ALT OP_DIV))) (RULE LLA (BLOCK (ALT '{'))) (RULE LLC (BLOCK (ALT '}'))) (RULE PRA (BLOCK (ALT '('))) (RULE PRC (BLOCK (ALT ')'))) (RULE PCA (BLOCK (ALT '['))) (RULE PCC (BLOCK (ALT ']'))) (RULE EOL (BLOCK (ALT ';'))) (RULE IF (BLOCK (ALT 'if') (ALT 'IF'))) (RULE WHILE (BLOCK (ALT 'while') (ALT 'WHILE'))) (RULE VAR (BLOCK (ALT 'VAR'))) (RULE FINVAR (BLOCK (ALT 'FINVAR'))) (RULE INT (BLOCK (ALT 'INT') (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float') (ALT 'FLOAT'))) (RULE ELSE (BLOCK (ALT 'else') (ALT 'ELSE')))))
2022-07-01 03:20:46:077 semantics LogManager.java:25 tokens={EOF=-1, PUERTA_Q=1, INI=2, SELE=3, EN=4, OP=5, TEN=6, ENTRE=7, UN=8, INV=9, MED=10, QUBIT=11, INDEX=12, NEWLINE=13, WHITESPACE=14, DIGITO=15, N_INTEGER=16, N_FLOAT=17, LETRA=18, ESPACIO=19, COMENTARIO_INI=20, COMENTARIO_FIN=21, COMA=22, PUNTO=23, OP_SUM=24, OP_REST=25, OP_POR=26, OP_DIV=27, OP_IGUAL=28, OP_MAYOR=29, OP_MENOR=30, OP_MAYOR_IGUAL=31, OP_MENOR_IGUAL=32, OP_EQUI=33, OP_NEG=34, OP_DOSP=35, OP_DIF=36, OP_Y=37, OP_LOGICA=38, OP_ARITMETICA=39, LLA=40, LLC=41, PRA=42, PRC=43, PCA=44, PCC=45, EOL=46, IF=47, WHILE=48, VAR=49, FINVAR=50, INT=51, FLOAT=52, ELSE=53}
2022-07-01 03:20:46:077 semantics LogManager.java:25 strings={' '=19, '/*'=20, '*/'=21, ','=22, '.'=23, '+'=24, '-'=25, '*'=26, '/'=27, '='=28, '>'=29, '<'=30, '>='=31, '<='=32, '=='=33, '!'=34, ':'=35, '!='=36, '&'=37, '{'=40, '}'=41, '('=42, ')'=43, '['=44, ']'=45, ';'=46, 'VAR'=49, 'FINVAR'=50}
2022-07-01 03:20:46:086 LL1 LogManager.java:25 
DECISION 0 in rule expr
2022-07-01 03:20:46:086 LL1 LogManager.java:25 look=[3, 5, 6, 8, 9, 10]
2022-07-01 03:20:46:087 LL1 LogManager.java:25 LL(1)? true
2022-07-01 03:20:46:087 LL1 LogManager.java:25 
DECISION 1 in rule registro_q
2022-07-01 03:20:46:087 LL1 LogManager.java:25 look=[2, 2, 2, 2, 2]
2022-07-01 03:20:46:087 LL1 LogManager.java:25 LL(1)? false
2022-07-01 03:20:46:087 LL1 LogManager.java:25 
DECISION 2 in rule seleccion
2022-07-01 03:20:46:087 LL1 LogManager.java:25 look=[3, 3]
2022-07-01 03:20:46:087 LL1 LogManager.java:25 LL(1)? false
2022-07-01 03:20:46:087 LL1 LogManager.java:25 
DECISION 3 in rule operar
2022-07-01 03:20:46:087 LL1 LogManager.java:25 look=[5, 5]
2022-07-01 03:20:46:087 LL1 LogManager.java:25 LL(1)? false
2022-07-01 03:20:46:087 LL1 LogManager.java:25 
DECISION 4 in rule tensor
2022-07-01 03:20:46:087 LL1 LogManager.java:25 look=[6, 6]
2022-07-01 03:20:46:087 LL1 LogManager.java:25 LL(1)? false
2022-07-01 03:20:46:087 LL1 LogManager.java:25 
DECISION 5 in rule union
2022-07-01 03:20:46:087 LL1 LogManager.java:25 look=[8, 8]
2022-07-01 03:20:46:087 LL1 LogManager.java:25 LL(1)? false
2022-07-01 03:20:46:087 LL1 LogManager.java:25 
DECISION 6 in rule inversa
2022-07-01 03:20:46:087 LL1 LogManager.java:25 look=[9, 9]
2022-07-01 03:20:46:087 LL1 LogManager.java:25 LL(1)? false
2022-07-01 03:20:46:087 LL1 LogManager.java:25 
DECISION 7 in rule medir
2022-07-01 03:20:46:087 LL1 LogManager.java:25 look=[10, 10]
2022-07-01 03:20:46:087 LL1 LogManager.java:25 LL(1)? false
2022-07-01 03:20:46:087 LL1 LogManager.java:25 
DECISION 8 in rule id
2022-07-01 03:20:46:088 LL1 LogManager.java:25 look=[18, {3..10, 15, 22, 28, 37..38, 42..44, 46}]
2022-07-01 03:20:46:088 LL1 LogManager.java:25 LL(1)? true
2022-07-01 03:20:46:088 LL1 LogManager.java:25 
DECISION 9 in rule id
2022-07-01 03:20:46:088 LL1 LogManager.java:25 look=[15, {3..10, 22, 28, 37..38, 42..44, 46}]
2022-07-01 03:20:46:089 LL1 LogManager.java:25 LL(1)? true
2022-07-01 03:20:46:089 LL1 LogManager.java:25 
DECISION 10 in rule array_q
2022-07-01 03:20:46:089 LL1 LogManager.java:25 look=[44, 44]
2022-07-01 03:20:46:089 LL1 LogManager.java:25 LL(1)? false
2022-07-01 03:20:46:089 LL1 LogManager.java:25 
DECISION 11 in rule mas_q
2022-07-01 03:20:46:089 LL1 LogManager.java:25 look=[11, 11]
2022-07-01 03:20:46:089 LL1 LogManager.java:25 LL(1)? false
2022-07-01 03:20:46:089 LL1 LogManager.java:25 
DECISION 12 in rule array
2022-07-01 03:20:46:089 LL1 LogManager.java:25 look=[16, 17, 18, 35]
2022-07-01 03:20:46:089 LL1 LogManager.java:25 LL(1)? true
2022-07-01 03:20:46:089 LL1 LogManager.java:25 
DECISION 13 in rule array
2022-07-01 03:20:46:089 LL1 LogManager.java:25 look=[{16..18, 35}, {16..18, 35}]
2022-07-01 03:20:46:089 LL1 LogManager.java:25 LL(1)? false
2022-07-01 03:20:46:089 LL1 LogManager.java:25 
DECISION 14 in rule array
2022-07-01 03:20:46:089 LL1 LogManager.java:25 look=[16, 17, 18, 35]
2022-07-01 03:20:46:089 LL1 LogManager.java:25 LL(1)? true
2022-07-01 03:20:46:089 LL1 LogManager.java:25 
DECISION 15 in rule matriz
2022-07-01 03:20:46:089 LL1 LogManager.java:25 look=[42, 42]
2022-07-01 03:20:46:089 LL1 LogManager.java:25 LL(1)? false
2022-07-01 03:20:46:089 LL1 LogManager.java:25 
DECISION 16 in rule variable_declar
2022-07-01 03:20:46:089 LL1 LogManager.java:25 look=[42, 44, 18, 17, 35, {16..17}]
2022-07-01 03:20:46:089 LL1 LogManager.java:25 LL(1)? false
2022-07-01 03:20:46:089 LL1 LogManager.java:25 
DECISION 17 in rule sentencia
2022-07-01 03:20:46:089 LL1 LogManager.java:25 look=[49, 47, 48]
2022-07-01 03:20:46:089 LL1 LogManager.java:25 LL(1)? true
2022-07-01 03:20:46:089 LL1 LogManager.java:25 
DECISION 18 in rule sentencia
2022-07-01 03:20:46:090 LL1 LogManager.java:25 look=[{47..49}, 41]
2022-07-01 03:20:46:090 LL1 LogManager.java:25 LL(1)? true
2022-07-01 03:20:46:090 LL1 LogManager.java:25 
DECISION 19 in rule if_sentencia
2022-07-01 03:20:46:090 LL1 LogManager.java:25 look=[53, {41, 47..49}]
2022-07-01 03:20:46:090 LL1 LogManager.java:25 LL(1)? true
